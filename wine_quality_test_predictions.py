# -*- coding: utf-8 -*-
"""WINE QUALITY TEST PREDICTIONS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sco7-OinG8qzRQY7ngv0yKNqi5zkddUr

#                            WINE QUALITY TEST PREDICTIONS :-

#what defines quality of wine?
The final indicators of both white and red wine quality are the intensity and finish. High-quality wines will express intense flavors and a lingering finish, with flavors lasting after you've swallowed the wine. Flavors that disappear immediately can indicate that your wine is of moderate quality at best.

#ProblemStatement:-
Here we will predict of wine on the basis of giving features.We use the wine quality dataset from kaggle.This dataset has the fundamental features which are responsible for the affecting the quality of the wine .By the use of several machine learning models,we will pnredict the quality of the wine.Here we will only deal with the white type wie quality ,we use classification techniques to check further the quality of the wine i.e. is it good or bad.

#List of Activities:

Activity 1: Analysing the Dataset

Activity 2: Data Preparation

Activity 3: Train-Test Split

Activity 4: Model Training

Activity 5: Model Prediction and Evaluation

#ABOUT DATA:
The two datasets are related to red and white variants of the Portuguese "Vinho Verde" wine. For more details, consult the reference [Cortez et al., 2009]. Due to privacy and logistic issues, only physicochemical (inputs) and sensory (the output) variables are available (e.g. there is no data about grape types, wine brand, wine selling price, etc

# Activity 1: Analysing the dataset

Create a Pandas DataFrame Wine Quality Prediction for dataset using the below link. This dataset consists of following columns:

Field : Description

1) fixed acidity : most acids involved with wine or fixed or nonvolatile (do not evaporate readily

2) volatile acidity :the amount of acetic acid in wine, which at too high of levels can lead to an unpleasant, vinegar taste

3) citric acid :found in small quantities, citric acid can add 'freshness' and flavor to wines

4) residual sugar : the amount of sugar remaining after fermentation stops, it's rare to find wines with less than 1 gram/liter and

5) chlorides : the amount of salt in the wine

6) free sulfur dioxid : the free form of SO2 exists in equilibrium between molecular SO2 (as a dissolved gas) and bisulfite ion; it prevents

7) total sulfur dioxide : amount of free and bound forms of S02; in low concentrations, SO2 is mostly undetectable in wine, but at free SO2

8) density : the density of water is close to that of water depending on the percent alcohol and sugar content

9) pH : describes how acidic or basic a wine is on a scale from 0 (very acidic) to 14 (very basic); most wines are between 3-4 on the

10) sulphates : a wine additive which can contribute to sulfur dioxide gas (S02) levels, wich acts as an antimicrobial and antioxidant

11) alcohol : the percent alcohol content of the wine

12) quality : output variable (based on sensory data, score between 0 and 10)

DATA link: https://www.kaggle.com/uciml/red-wine...

* The import numpy portion of the code tells Python to bring the NumPy library into your current environment. The as np portion of the code then tells Python to give NumPy the alias of np. This allows you to use NumPy functions by simply typing np.

* Importing pandas means bringing all of the pandas functionality to your finger tips in your python script or jupyter notebook.

* matplotlib. pyplot is a collection of command style functions that make matplotlib work like MATLAB.

* Seaborn is a library for making statistical graphics in Python. It builds on top of matplotlib and integrates closely with pandas data structures.Seaborn helps you explore and understand your data. Its plotting functions operate on dataframes and arrays containing whole datasets and internally perform the necessary semantic mapping and statistical aggregation to produce informative plots.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""Data Collection"""

# loading the dataset to a Pandas DataFrame
wine_dataset = pd.read_csv('winequality-red.csv')

# number of rows & columns in the dataset
wine_dataset.shape

# first 5 rows of the dataset
wine_dataset.head()

# checking for missing values
wine_dataset.isnull().sum()

"""Data Analysis and Visulaization

#Activity 2: Data Preparation

* The wine dataset contains the results of a chemical analysis of wines grown in a specific area of Italy. Three types of wine are represented in the 178 samples, with the results of 13 chemical analyses recorded for each sample. The Type variable has been transformed into a categoric variable.
"""

# statistical measures of the dataset
wine_dataset.describe()

# number of values for each quality
sns.catplot(x='quality', data = wine_dataset, kind = 'count')

# volatile acidity vs Quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y = 'volatile acidity', data = wine_dataset)

# citric acid vs Quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y = 'citric acid', data = wine_dataset)

"""Correlation

1. Positive Correlation
2. Negative Correlation
"""

correlation = wine_dataset.corr()

# constructing a heatmap to understand the correlation between the columns
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt = '.1f', annot = True, annot_kws={'size':8}, cmap = 'Blues')

"""Data Preprocessing"""

# separate the data and Label
X = wine_dataset.drop('quality',axis=1)

print(X)

"""Label Binarizaton"""

Y = wine_dataset['quality'].apply(lambda y_value: 1 if y_value>=7 else 0)

print(Y)

"""#Activity 3: Train-Test Split

1). X_train - This includes your all independent variables,these will be used to train the model, also as we have specified the test_size = 0.4, this means 60% of observations from your complete data will be used to train/fit the model and rest 40% will be used to test the model.

2). X_test - This is remaining 40% portion of the independent variables from the data which will not be used in the training phase and will be used to make predictions to test the accuracy of the model.

3). y_train - This is your dependent variable which needs to be predicted by this model, this includes category labels against your independent variables, we need to specify our dependent variable while training/fitting the model.

4). y_test - This data has category labels for your test data, these labels will be used to test the accuracy between actual and predicted categories.

* X_train => will have 600 data points. Y_train => will have 400 data points. X_test=> will have class labels corresponding to 600 data points. Y_test=> will have class labels corresponding to 400 data points.
"""

from sklearn.model_selection import train_test_split

print(Y.shape, Y_train.shape, Y_test.shape)

"""#Activity 4: Model Training

* A random forest classifier. A random forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting.
"""

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier()

model.fit(X_train, Y_train)

"""#Activity 5: Model Prediction and Evaluation

* Difference between accuracy_score in scikit-learn and ...
How to predict on new data row using trained X
Precision_score and accuracy_score showing value
Which items to include in accuracy_score() to find accu
More results from stackoverflow.com
"""

from sklearn.metrics import accuracy_score

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy : ', test_data_accuracy)

"""Building a Predictive System"""

input_data = (7.5,0.5,0.36,6.1,0.071,17.0,102.0,0.9978,3.35,0.8,10.5)

# changing the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the data as we are predicting the label for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==1):
  print('Good Quality Wine')
else:
  print('Bad Quality Wine')